#!/usr/bin/env php
<?php

ini_set('display_errors','on');
ini_set('error_reporting', E_ALL|E_STRICT);

$dirs = array();
$bootstrapFiles = array();
$outputMode = 'errorsOnly'; // errorsOnly|colorful

for( $i=1; $i<count($argv); ++$i ) {
	$arg = $argv[$i];
	if( $arg == '--colorful-output' ) {
		$outputMode = 'colorful';
	} else if( $arg == '--bootstrap' ) {
		$bootstrapFiles[] = $argv[++$i];
	} else if( preg_match('/^--bootstrap=(.*)$/', $arg, $bif) ) {
		$bootstrapFiles[] = $bif[1];
	} else if( preg_match('/^-/', $arg) ) {
		fwrite(STDERR, "My hat is bread.  Your argument is invalid: $arg\n");
		exit(1);
	}
	$dirs[] = $arg;
}

foreach( $bootstrapFiles as $f ) {
	require_once $f;
}

$finder = new TOGoS_SimplerTest_TestFinder();
$testClassInfos = array();
foreach( $dirs as $dir ) {
	$finder->findTestClasses($dir, $testClassInfos);
}

function aggregateStats( $agg, $b ) {
	foreach( $agg as $k=>$v ) {
		if( !isset($b[$k]) ) continue;
		if( is_array($v) ) {
			$agg[$k] = array_merge($v, $b[$k]);
		} else if( is_numeric($v) && is_numeric($b[$k]) ) {
			$agg[$k] += $b[$k];
		} else {
			throw new Exception("Oh no don't know how to aggregate ".var_export($b[$k],true)." into ".var_export($agg[$k],true)." for $k");
		}
	}
	return $agg;
}

$overallStats = array(
	'testCases' => array(),
	'assertionCount' => 0,
	'subCases' => array(),
	'skippedSubCases' => array(),
	'failures' => array(),
);
foreach( $testClassInfos as $tci ) {
	$className = $tci['className'];
	$testCase = new $className();
	$stats = $testCase->runTests();
	$overallStats = aggregateStats($overallStats, $stats);
}

$okay = count($overallStats['failures']) == 0;

foreach( $overallStats['failures'] as $failure ) {
	$exception = $failure['exception'];
	echo "{$failure['className']}#{$failure['methodName']} says:\n";
	while( $exception ) {
		$message = str_replace("\n", "\n    ",$exception->getMessage());
		echo "    {$message}\n";
		$backtrace = $exception->getTrace();
		foreach( $backtrace as $item ) {
			if( isset($item['file']) || isset($item['line']) ) {
				$f = isset($item['file']) ? $item['file'] : '';
				$l = isset($item['line']) ? $item['line'] : '';
				$u = isset($item['function']) ? $item['function'] : '';
				echo "  " . $f . ($l ? ":{$l}" : '') . ($u ? " in {$u}" : '') . "\n";
			}
		}
		$exception = $exception->getPrevious();
		if( $exception == null ) break;
		
		echo "Caused by...\n";
	}
	echo "\n";
}

switch( $outputMode ) {
case 'colorful':
	$stuf = array(
		count($overallStats['testCases'])." test cases",
		count($overallStats['subCases'])." sub-cases",
		"{$overallStats['assertionCount']} assertions",
	);
	if( count($overallStats['skippedSubCases']) > 0 ) {
		$stuf[] = count($overallStats['skippedSubCases'])." sub-cases skipped";
		// List them out if there's like a -v or something
	}
	echo implode(', ',$stuf), "\n";
	if( $okay ) {
		echo "\e[1m\e[32;1mOkay!\e[0m\n";
	} else {
		echo "\e[1m\e[31;1mSome tests failed!\e[0m\n";
	}
	break;
default:
	if( !$okay ) {
		echo "\e[1m\e[31;1mSome tests failed!\e[0m\n";
	}
}

exit($okay ? 0 : 1);
